// TODO: complete this object/class

// The constructor takes in an array of items and a integer indicating how many
// items fit within a single page
function PaginationHelper(collection, itemsPerPage){
  this._pages = []; 
  let tempCollection = collection.slice();
  while (tempCollection.length) {
    this._pages.push(tempCollection.splice(0, itemsPerPage))
  };
  this._collection = collection;
  this._itemCount = collection.length;
  this._itemsPerPage = itemsPerPage;
  this._pageCount = Math.ceil(this._itemCount / itemsPerPage);   
}

// returns the number of items within the entire collection
PaginationHelper.prototype.itemCount = function() {
  return this._itemCount;
}

// returns the number of pages
PaginationHelper.prototype.pageCount = function() {
  return this._pageCount;
}

// returns the number of items on the current page. page_index is zero based.
// this method should return -1 for pageIndex values that are out of range
PaginationHelper.prototype.pageItemCount = function(pageIndex) {
  console.log(this._pageCount, pageIndex);
  if (pageIndex < 0 || pageIndex > this._pageCount - 1) return -1;
  return this._pages[pageIndex].length;
}

// determines what page an item is on. Zero based indexes
// this method should return -1 for itemIndex values that are out of range
PaginationHelper.prototype.pageIndex = function(itemIndex) {
  if (itemIndex < 0 || itemIndex > this._itemCount - 1 || !this._collection.length) return -1;
  return Math.floor(itemIndex / this._itemsPerPage);
}
